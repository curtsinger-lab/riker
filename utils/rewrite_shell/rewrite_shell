#!/usr/bin/env python3
from typing import TYPE_CHECKING, Dict, Optional
from bashlex import parser, ast # type: ignore
from lib.substitution import SubstitutionVistor
from lib.pretty_printer import PrettyPrinter
from lib.utils import join_long_lines
import sys
import os

# to store variable bindings; initialize with environment
env: Dict[str,str] = dict(os.environ)

# lines of the input file
lines: list[str] = []

# array of AST nodes
trees: list[Optional[ast.node]] = []

# read input file
with open(sys.argv[1], "r") as f:
    lines = f.readlines()

# preprocess long lines
lines = join_long_lines(lines)

# determine which lines can be substituted
for line in lines:
    input = line.strip()
    
    try:
        trees += parser.parse(input)
    except:
        # bashlex doesn't understand comments,
        # shebangs, empty lines, etc.
        # just skip parsing those things and
        # echo later
        trees.append(None)
        continue

# do substitutions & print results
for i in range(len(trees)):
    if trees[i] is None:
        print(lines[i], end="")
        continue
        
    # init visitors
    visitor = SubstitutionVistor(env)
    
    # do substitutions
    tree2 = visitor.visit(trees[i])
    
    # echo modified command
    PrettyPrinter.print(tree2)