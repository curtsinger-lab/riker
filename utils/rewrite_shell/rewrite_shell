#!/usr/bin/env python3
from typing import TYPE_CHECKING, Dict, Optional
from bashlex import parser, ast # type: ignore
from lib.pretty_printer import prettyprinter
from lib.ast_printer import astprinter
from lib.substitution import SubstitutionVistor
import sys

# to store variable bindings
env: Dict[str,str] = {}

# lines of the input file
lines: list[str] = []

# array of AST nodes
trees: list[Optional[ast.node]] = []

with open(sys.argv[1], "r") as f:
    lines = f.readlines()

for line in lines:
    input = line.strip()
    
    # bashlex barfs on empty lines
    if len(input) == 0:
        trees.append(None)
        continue

    # bashlex mysteriously does not understand shebangs
    if input[0] == "#" and input[1] == "!":
        trees.append(None)
        continue

    # ignore comments for now
    if input[0] == "#":
        trees.append(None)
        continue

    # otherwise, it's an expression
    trees += parser.parse(input)

for i in range(len(trees)):
    if trees[i] is None:
        print(lines[i], end="")
        continue
    
    # init visitors
    visitor = SubstitutionVistor(env)
    
    # do substitutions
    tree2 = visitor.visit(trees[i])
    
    # echo modified command
    prettyprinter.print(tree2)